plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.javamodularity.moduleplugin' version "1.5.0"
    id 'org.beryx.runtime' version '1.12.7'
    id 'edu.sc.seis.launch4j' version '2.5.3'
}

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.7.1'
}
/**********************************/
sourceCompatibility = '16'
targetCompatibility = '16'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    //mainModule = 'Mainapplication'
    mainClass = 'Mainapplication.HelloApplication'
}

javafx {
    version = '16'
    modules = ['javafx.controls', 'javafx.fxml','javafx.web']
}

dependencies {
    implementation 'com.itextpdf:kernel:7.2.2'
    implementation 'com.itextpdf:layout:7.2.2'
    implementation 'com.itextpdf:styled-xml-parser:7.2.2'
    implementation 'com.itextpdf:itext7-core:7.2.2'
    implementation 'com.itextpdf:io:7.2.2'
    implementation 'com.itextpdf:kernel:7.2.2'
    implementation 'com.itextpdf:html2pdf:4.0.2'
    implementation group: 'de.neuland-bfi', name: 'pug4j', version: '2.0.5'
  //  implementation group:'com.opencsv',name:'opencsv',version:'4.4'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0'
  //  implementation group: 'eu.hansolo', name: 'Medusa', version: '11.1'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation( group : 'com.jfoenix', name: 'jfoenix', version: '9.0.9')
    implementation group :'net.lingala.zip4j',name:'zip4j',version:'2.9.0'
 //   implementation group: 'eu.hansolo', name: 'tilesfx', version: '1.0.7'
    // https://jmaven.com/maven/com.jidesoft/jidefx-converters
    implementation group: 'com.jidesoft', name: 'jidefx-converters', version: '0.9.1'
    implementation 'com.epam:parso:2.0.14'
    annotationProcessor 'org.jumpmind.symmetric:symmetric-csv:3.5.19'
    //testRuntimeOnly('com.github.cliftonlabs:json-simple:3.1.0')
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation('org.controlsfx:controlsfx:11.1.0')
    implementation('com.dlsc.formsfx:formsfx-core:11.3.2') {
        exclude(group: 'org.openjfx')
    }

    implementation('org.kordamp.ikonli:ikonli-javafx:12.2.0')
    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')
    implementation('eu.hansolo:tilesfx:11.48') {
        exclude(group: 'org.openjfx')
    }

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

/*************************************************************/
launch4j {
    outfile = 'Portfolio2.exe'
    mainClassName = 'Mainapplication.HelloApplication'
  //  icon = "${projectDir}/icons/Ecareer2.ico"
    productName = 'My App1'
    headerType="gui"
    /*********/
    jreMinVersion = '16'
    jdkPreference = 'preferJre'
    /*********/
    libraryDir = 'libs1'
    initialHeapSize = 256
    maxHeapSize = 256
   // stayAlive = true
    bundledJre64Bit = true
    dontWrapJar = true
    bundledJrePath = 'jre'
    version ='1.0.2'
    //launch4jCmd = 'launch4j-test'
   // outfile = 'Portfolio.exe'
    //language ="ENGLISH_EN"

    jvmOptions = ["-Dfile.encoding=UTF8", "-Xmx256m", "-Xms256m"]
    // jar = '../libs/Master_Mode_System_Config-all-1.0-SNAPSHOT.jar'
}
/******************
launch4j {
    mainClassName ='Mainapplication.HelloApplication'
}

task createMyApp(type: edu.sc.seis.launch4j.tasks.Launch4jExternalTask) {
    launch4jCmd = 'launch4j-test'
    outfile = 'MyApp.exe'
}
/*
launch4j {
    mainClassName = 'pcgen.system.Main'
    icon = "${projectDir}/installers/win-installer/Local/pcgen.ico"
    outfile = "pcgen.exe"
    jreMinVersion = '1.8.0'
    jreMaxVersion = '1.8.9'
    jdkPreference = 'preferJre'
    initialHeapSize = 128
    maxHeapSize = 512
    stayAlive = false
    bundledJre64Bit = true
    dontWrapJar = true
    bundledJrePath = 'jre'
}
/***************************generation d'executable**********************************/
ext {
    cloneDir = "$buildDir/clone"
    imageDirPath = "$buildDir/GenererExecutable"
    imageZipPath = "$buildDir/image-zip/pacman.zip"
}
/*******************************
runtime {
        imageDir = file(imageDirPath)
        imageZip = file(imageZipPath)
        options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
        modules = ['java.desktop', 'java.xml', 'jdk.unsupported', 'java.scripting']
        jpackage {
            // jpackageHome = '/usr/lib/jvm/jdk14'
            if(org.gradle.internal.os.OperatingSystem.current().windows) {
                installerType = 'msi'
                imageOptions = ['--win-console']
                installerOptions = ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
            }
        }
    /***************************************
    launcher {
        jvmArgs = ["--add-modules=javafx.base,javafx.controls,javafx.fxml"]
    }
    /***************************************
    jpackage {
        if(org.gradle.internal.os.OperatingSystem.current().windows) {
            installerType = 'msi'
             imageOptions = ['--win-console']
            installerOptions = ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
    }
}
/**
tasks.runtime.doLast {
    copy {
        from('src/main/resources')
        into("$buildDir/image/bin")
    }
}
/****************************************************************/
test {
    useJUnitPlatform()
}
/*******************/